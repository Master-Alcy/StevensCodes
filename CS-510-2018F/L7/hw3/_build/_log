### Starting build.
# Target: checker.ml.depends, tags: { package(oUnit), bin_annot, extension:ml, file:checker.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package oUnit -modules checker.ml > checker.ml.depends
# Target: ast.ml.depends, tags: { package(oUnit), bin_annot, extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package oUnit -modules ast.ml > ast.ml.depends
# Target: lexer.mll, tags: { package(oUnit), bin_annot, extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { package(oUnit), bin_annot, extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package oUnit -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { package(oUnit), bin_annot, extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends
# Target: ast.cmo, tags: { package(oUnit), bin_annot, byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o ast.cmo ast.ml
# Target: parser.mly, tags: { package(oUnit), bin_annot, byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc -bin-annot -package oUnit' --infer parser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -bin-annot -package oUnit' --infer parser.mly
Warning: 2 states have shift/reduce conflicts.
Warning: 2 shift/reduce conflicts were arbitrarily resolved.
# Target: parser.mli.depends, tags: { package(oUnit), bin_annot, extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package oUnit -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { package(oUnit), bin_annot, byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o parser.cmi parser.mli
# Target: lexer.cmo, tags: { package(oUnit), bin_annot, byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o lexer.cmo lexer.ml
# Target: checker.cmo, tags: { package(oUnit), bin_annot, byte, compile, extension:cmo, extension:ml, file:checker.cmo, file:checker.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o checker.cmo checker.ml
# Target: parser.ml.depends, tags: { package(oUnit), bin_annot, extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package oUnit -modules parser.ml > parser.ml.depends
# Target: parser.cmo, tags: { package(oUnit), bin_annot, byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o parser.cmo parser.ml
# Target: checker.byte, tags: { package(oUnit), bin_annot, byte, dont_link_with, extension:byte, file:checker.byte, link, ocaml, program, quiet }
ocamlfind ocamlc -linkpkg -package oUnit ast.cmo parser.cmo lexer.cmo checker.cmo -o checker.byte
# Compilation successful.
