// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  blog: (where?: BlogWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  blog: (where: BlogWhereUniqueInput) => BlogPromise;
  blogs: (args?: {
    where?: BlogWhereInput;
    orderBy?: BlogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Blog>;
  blogsConnection: (args?: {
    where?: BlogWhereInput;
    orderBy?: BlogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlogConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBlog: (data: BlogCreateInput) => BlogPromise;
  updateBlog: (args: {
    data: BlogUpdateInput;
    where: BlogWhereUniqueInput;
  }) => BlogPromise;
  updateManyBlogs: (args: {
    data: BlogUpdateManyMutationInput;
    where?: BlogWhereInput;
  }) => BatchPayloadPromise;
  upsertBlog: (args: {
    where: BlogWhereUniqueInput;
    create: BlogCreateInput;
    update: BlogUpdateInput;
  }) => BlogPromise;
  deleteBlog: (where: BlogWhereUniqueInput) => BlogPromise;
  deleteManyBlogs: (where?: BlogWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  blog: (
    where?: BlogSubscriptionWhereInput
  ) => BlogSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BlogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "article_ASC"
  | "article_DESC"
  | "likes_ASC"
  | "likes_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "content_ASC"
  | "content_DESC"
  | "likes_ASC"
  | "likes_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "address_ASC"
  | "address_DESC"
  | "interest_ASC"
  | "interest_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BlogWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  title?: String;
}>;

export interface BlogWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  article?: String;
  article_not?: String;
  article_in?: String[] | String;
  article_not_in?: String[] | String;
  article_lt?: String;
  article_lte?: String;
  article_gt?: String;
  article_gte?: String;
  article_contains?: String;
  article_not_contains?: String;
  article_starts_with?: String;
  article_not_starts_with?: String;
  article_ends_with?: String;
  article_not_ends_with?: String;
  likes?: Int;
  likes_not?: Int;
  likes_in?: Int[] | Int;
  likes_not_in?: Int[] | Int;
  likes_lt?: Int;
  likes_lte?: Int;
  likes_gt?: Int;
  likes_gte?: Int;
  postedBy?: UserWhereInput;
  comments_some?: CommentWhereInput;
  AND?: BlogWhereInput[] | BlogWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  interest?: String;
  interest_not?: String;
  interest_in?: String[] | String;
  interest_not_in?: String[] | String;
  interest_lt?: String;
  interest_lte?: String;
  interest_gt?: String;
  interest_gte?: String;
  interest_contains?: String;
  interest_not_contains?: String;
  interest_starts_with?: String;
  interest_not_starts_with?: String;
  interest_ends_with?: String;
  interest_not_ends_with?: String;
  blogs_some?: BlogWhereInput;
  comments_some?: CommentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  likes?: Int;
  likes_not?: Int;
  likes_in?: Int[] | Int;
  likes_not_in?: Int[] | Int;
  likes_lt?: Int;
  likes_lte?: Int;
  likes_gt?: Int;
  likes_gte?: Int;
  postedBy?: UserWhereInput;
  forBlog?: BlogWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface BlogCreateInput {
  id?: ID_Input;
  title: String;
  article: String;
  likes?: Int;
  postedBy: UserCreateOneWithoutBlogsInput;
  comments?: CommentCreateManyWithoutForBlogInput;
}

export interface UserCreateOneWithoutBlogsInput {
  create?: UserCreateWithoutBlogsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutBlogsInput {
  id?: ID_Input;
  name: String;
  password: String;
  email: String;
  phone?: String;
  address?: String;
  interest?: String;
  comments?: CommentCreateManyWithoutPostedByInput;
}

export interface CommentCreateManyWithoutPostedByInput {
  create?:
    | CommentCreateWithoutPostedByInput[]
    | CommentCreateWithoutPostedByInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutPostedByInput {
  id?: ID_Input;
  content: String;
  likes?: Int;
  forBlog: BlogCreateOneWithoutCommentsInput;
}

export interface BlogCreateOneWithoutCommentsInput {
  create?: BlogCreateWithoutCommentsInput;
  connect?: BlogWhereUniqueInput;
}

export interface BlogCreateWithoutCommentsInput {
  id?: ID_Input;
  title: String;
  article: String;
  likes?: Int;
  postedBy: UserCreateOneWithoutBlogsInput;
}

export interface CommentCreateManyWithoutForBlogInput {
  create?:
    | CommentCreateWithoutForBlogInput[]
    | CommentCreateWithoutForBlogInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateWithoutForBlogInput {
  id?: ID_Input;
  content: String;
  likes?: Int;
  postedBy: UserCreateOneWithoutCommentsInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutCommentsInput {
  id?: ID_Input;
  name: String;
  password: String;
  email: String;
  phone?: String;
  address?: String;
  interest?: String;
  blogs?: BlogCreateManyWithoutPostedByInput;
}

export interface BlogCreateManyWithoutPostedByInput {
  create?: BlogCreateWithoutPostedByInput[] | BlogCreateWithoutPostedByInput;
  connect?: BlogWhereUniqueInput[] | BlogWhereUniqueInput;
}

export interface BlogCreateWithoutPostedByInput {
  id?: ID_Input;
  title: String;
  article: String;
  likes?: Int;
  comments?: CommentCreateManyWithoutForBlogInput;
}

export interface BlogUpdateInput {
  title?: String;
  article?: String;
  likes?: Int;
  postedBy?: UserUpdateOneRequiredWithoutBlogsInput;
  comments?: CommentUpdateManyWithoutForBlogInput;
}

export interface UserUpdateOneRequiredWithoutBlogsInput {
  create?: UserCreateWithoutBlogsInput;
  update?: UserUpdateWithoutBlogsDataInput;
  upsert?: UserUpsertWithoutBlogsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutBlogsDataInput {
  name?: String;
  password?: String;
  email?: String;
  phone?: String;
  address?: String;
  interest?: String;
  comments?: CommentUpdateManyWithoutPostedByInput;
}

export interface CommentUpdateManyWithoutPostedByInput {
  create?:
    | CommentCreateWithoutPostedByInput[]
    | CommentCreateWithoutPostedByInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutPostedByInput[]
    | CommentUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutPostedByInput[]
    | CommentUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostedByDataInput;
}

export interface CommentUpdateWithoutPostedByDataInput {
  content?: String;
  likes?: Int;
  forBlog?: BlogUpdateOneRequiredWithoutCommentsInput;
}

export interface BlogUpdateOneRequiredWithoutCommentsInput {
  create?: BlogCreateWithoutCommentsInput;
  update?: BlogUpdateWithoutCommentsDataInput;
  upsert?: BlogUpsertWithoutCommentsInput;
  connect?: BlogWhereUniqueInput;
}

export interface BlogUpdateWithoutCommentsDataInput {
  title?: String;
  article?: String;
  likes?: Int;
  postedBy?: UserUpdateOneRequiredWithoutBlogsInput;
}

export interface BlogUpsertWithoutCommentsInput {
  update: BlogUpdateWithoutCommentsDataInput;
  create: BlogCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostedByDataInput;
  create: CommentCreateWithoutPostedByInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  likes?: Int;
  likes_not?: Int;
  likes_in?: Int[] | Int;
  likes_not_in?: Int[] | Int;
  likes_lt?: Int;
  likes_lte?: Int;
  likes_gt?: Int;
  likes_gte?: Int;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  content?: String;
  likes?: Int;
}

export interface UserUpsertWithoutBlogsInput {
  update: UserUpdateWithoutBlogsDataInput;
  create: UserCreateWithoutBlogsInput;
}

export interface CommentUpdateManyWithoutForBlogInput {
  create?:
    | CommentCreateWithoutForBlogInput[]
    | CommentCreateWithoutForBlogInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutForBlogInput[]
    | CommentUpdateWithWhereUniqueWithoutForBlogInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutForBlogInput[]
    | CommentUpsertWithWhereUniqueWithoutForBlogInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface CommentUpdateWithWhereUniqueWithoutForBlogInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutForBlogDataInput;
}

export interface CommentUpdateWithoutForBlogDataInput {
  content?: String;
  likes?: Int;
  postedBy?: UserUpdateOneRequiredWithoutCommentsInput;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput;
  update?: UserUpdateWithoutCommentsDataInput;
  upsert?: UserUpsertWithoutCommentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutCommentsDataInput {
  name?: String;
  password?: String;
  email?: String;
  phone?: String;
  address?: String;
  interest?: String;
  blogs?: BlogUpdateManyWithoutPostedByInput;
}

export interface BlogUpdateManyWithoutPostedByInput {
  create?: BlogCreateWithoutPostedByInput[] | BlogCreateWithoutPostedByInput;
  delete?: BlogWhereUniqueInput[] | BlogWhereUniqueInput;
  connect?: BlogWhereUniqueInput[] | BlogWhereUniqueInput;
  set?: BlogWhereUniqueInput[] | BlogWhereUniqueInput;
  disconnect?: BlogWhereUniqueInput[] | BlogWhereUniqueInput;
  update?:
    | BlogUpdateWithWhereUniqueWithoutPostedByInput[]
    | BlogUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | BlogUpsertWithWhereUniqueWithoutPostedByInput[]
    | BlogUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: BlogScalarWhereInput[] | BlogScalarWhereInput;
  updateMany?:
    | BlogUpdateManyWithWhereNestedInput[]
    | BlogUpdateManyWithWhereNestedInput;
}

export interface BlogUpdateWithWhereUniqueWithoutPostedByInput {
  where: BlogWhereUniqueInput;
  data: BlogUpdateWithoutPostedByDataInput;
}

export interface BlogUpdateWithoutPostedByDataInput {
  title?: String;
  article?: String;
  likes?: Int;
  comments?: CommentUpdateManyWithoutForBlogInput;
}

export interface BlogUpsertWithWhereUniqueWithoutPostedByInput {
  where: BlogWhereUniqueInput;
  update: BlogUpdateWithoutPostedByDataInput;
  create: BlogCreateWithoutPostedByInput;
}

export interface BlogScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  article?: String;
  article_not?: String;
  article_in?: String[] | String;
  article_not_in?: String[] | String;
  article_lt?: String;
  article_lte?: String;
  article_gt?: String;
  article_gte?: String;
  article_contains?: String;
  article_not_contains?: String;
  article_starts_with?: String;
  article_not_starts_with?: String;
  article_ends_with?: String;
  article_not_ends_with?: String;
  likes?: Int;
  likes_not?: Int;
  likes_in?: Int[] | Int;
  likes_not_in?: Int[] | Int;
  likes_lt?: Int;
  likes_lte?: Int;
  likes_gt?: Int;
  likes_gte?: Int;
  AND?: BlogScalarWhereInput[] | BlogScalarWhereInput;
  OR?: BlogScalarWhereInput[] | BlogScalarWhereInput;
  NOT?: BlogScalarWhereInput[] | BlogScalarWhereInput;
}

export interface BlogUpdateManyWithWhereNestedInput {
  where: BlogScalarWhereInput;
  data: BlogUpdateManyDataInput;
}

export interface BlogUpdateManyDataInput {
  title?: String;
  article?: String;
  likes?: Int;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutForBlogInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutForBlogDataInput;
  create: CommentCreateWithoutForBlogInput;
}

export interface BlogUpdateManyMutationInput {
  title?: String;
  article?: String;
  likes?: Int;
}

export interface CommentCreateInput {
  id?: ID_Input;
  content: String;
  likes?: Int;
  postedBy: UserCreateOneWithoutCommentsInput;
  forBlog: BlogCreateOneWithoutCommentsInput;
}

export interface CommentUpdateInput {
  content?: String;
  likes?: Int;
  postedBy?: UserUpdateOneRequiredWithoutCommentsInput;
  forBlog?: BlogUpdateOneRequiredWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  content?: String;
  likes?: Int;
}

export interface UserCreateInput {
  id?: ID_Input;
  name: String;
  password: String;
  email: String;
  phone?: String;
  address?: String;
  interest?: String;
  blogs?: BlogCreateManyWithoutPostedByInput;
  comments?: CommentCreateManyWithoutPostedByInput;
}

export interface UserUpdateInput {
  name?: String;
  password?: String;
  email?: String;
  phone?: String;
  address?: String;
  interest?: String;
  blogs?: BlogUpdateManyWithoutPostedByInput;
  comments?: CommentUpdateManyWithoutPostedByInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  password?: String;
  email?: String;
  phone?: String;
  address?: String;
  interest?: String;
}

export interface BlogSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BlogWhereInput;
  AND?: BlogSubscriptionWhereInput[] | BlogSubscriptionWhereInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Blog {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  article: String;
  likes: Int;
}

export interface BlogPromise extends Promise<Blog>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  article: () => Promise<String>;
  likes: () => Promise<Int>;
  postedBy: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BlogSubscription
  extends Promise<AsyncIterator<Blog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  article: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<Int>>;
  postedBy: <T = UserSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  password: String;
  email: String;
  phone?: String;
  address?: String;
  interest?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  interest: () => Promise<String>;
  blogs: <T = FragmentableArray<Blog>>(args?: {
    where?: BlogWhereInput;
    orderBy?: BlogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  interest: () => Promise<AsyncIterator<String>>;
  blogs: <T = Promise<AsyncIterator<BlogSubscription>>>(args?: {
    where?: BlogWhereInput;
    orderBy?: BlogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Comment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
  likes: Int;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  likes: () => Promise<Int>;
  postedBy: <T = UserPromise>() => T;
  forBlog: <T = BlogPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<Int>>;
  postedBy: <T = UserSubscription>() => T;
  forBlog: <T = BlogSubscription>() => T;
}

export interface BlogConnection {
  pageInfo: PageInfo;
  edges: BlogEdge[];
}

export interface BlogConnectionPromise
  extends Promise<BlogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlogEdge>>() => T;
  aggregate: <T = AggregateBlogPromise>() => T;
}

export interface BlogConnectionSubscription
  extends Promise<AsyncIterator<BlogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlogSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BlogEdge {
  node: Blog;
  cursor: String;
}

export interface BlogEdgePromise extends Promise<BlogEdge>, Fragmentable {
  node: <T = BlogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlogEdgeSubscription
  extends Promise<AsyncIterator<BlogEdge>>,
    Fragmentable {
  node: <T = BlogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBlog {
  count: Int;
}

export interface AggregateBlogPromise
  extends Promise<AggregateBlog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlogSubscription
  extends Promise<AsyncIterator<AggregateBlog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BlogSubscriptionPayload {
  mutation: MutationType;
  node: Blog;
  updatedFields: String[];
  previousValues: BlogPreviousValues;
}

export interface BlogSubscriptionPayloadPromise
  extends Promise<BlogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlogPreviousValuesPromise>() => T;
}

export interface BlogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlogPreviousValuesSubscription>() => T;
}

export interface BlogPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  article: String;
  likes: Int;
}

export interface BlogPreviousValuesPromise
  extends Promise<BlogPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  article: () => Promise<String>;
  likes: () => Promise<Int>;
}

export interface BlogPreviousValuesSubscription
  extends Promise<AsyncIterator<BlogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  article: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<Int>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
  likes: Int;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  likes: () => Promise<Int>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  password: String;
  email: String;
  phone?: String;
  address?: String;
  interest?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  interest: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  interest: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Blog",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
