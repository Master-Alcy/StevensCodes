module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBlog {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Blog {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  article: String!
  likes: Int!
  postedBy: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type BlogConnection {
  pageInfo: PageInfo!
  edges: [BlogEdge]!
  aggregate: AggregateBlog!
}

input BlogCreateInput {
  id: ID
  title: String!
  article: String!
  likes: Int
  postedBy: UserCreateOneWithoutBlogsInput!
  comments: CommentCreateManyWithoutForBlogInput
}

input BlogCreateManyWithoutPostedByInput {
  create: [BlogCreateWithoutPostedByInput!]
  connect: [BlogWhereUniqueInput!]
}

input BlogCreateOneWithoutCommentsInput {
  create: BlogCreateWithoutCommentsInput
  connect: BlogWhereUniqueInput
}

input BlogCreateWithoutCommentsInput {
  id: ID
  title: String!
  article: String!
  likes: Int
  postedBy: UserCreateOneWithoutBlogsInput!
}

input BlogCreateWithoutPostedByInput {
  id: ID
  title: String!
  article: String!
  likes: Int
  comments: CommentCreateManyWithoutForBlogInput
}

type BlogEdge {
  node: Blog!
  cursor: String!
}

enum BlogOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  article_ASC
  article_DESC
  likes_ASC
  likes_DESC
}

type BlogPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  article: String!
  likes: Int!
}

input BlogScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  article: String
  article_not: String
  article_in: [String!]
  article_not_in: [String!]
  article_lt: String
  article_lte: String
  article_gt: String
  article_gte: String
  article_contains: String
  article_not_contains: String
  article_starts_with: String
  article_not_starts_with: String
  article_ends_with: String
  article_not_ends_with: String
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  AND: [BlogScalarWhereInput!]
  OR: [BlogScalarWhereInput!]
  NOT: [BlogScalarWhereInput!]
}

type BlogSubscriptionPayload {
  mutation: MutationType!
  node: Blog
  updatedFields: [String!]
  previousValues: BlogPreviousValues
}

input BlogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlogWhereInput
  AND: [BlogSubscriptionWhereInput!]
}

input BlogUpdateInput {
  title: String
  article: String
  likes: Int
  postedBy: UserUpdateOneRequiredWithoutBlogsInput
  comments: CommentUpdateManyWithoutForBlogInput
}

input BlogUpdateManyDataInput {
  title: String
  article: String
  likes: Int
}

input BlogUpdateManyMutationInput {
  title: String
  article: String
  likes: Int
}

input BlogUpdateManyWithoutPostedByInput {
  create: [BlogCreateWithoutPostedByInput!]
  delete: [BlogWhereUniqueInput!]
  connect: [BlogWhereUniqueInput!]
  set: [BlogWhereUniqueInput!]
  disconnect: [BlogWhereUniqueInput!]
  update: [BlogUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [BlogUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [BlogScalarWhereInput!]
  updateMany: [BlogUpdateManyWithWhereNestedInput!]
}

input BlogUpdateManyWithWhereNestedInput {
  where: BlogScalarWhereInput!
  data: BlogUpdateManyDataInput!
}

input BlogUpdateOneRequiredWithoutCommentsInput {
  create: BlogCreateWithoutCommentsInput
  update: BlogUpdateWithoutCommentsDataInput
  upsert: BlogUpsertWithoutCommentsInput
  connect: BlogWhereUniqueInput
}

input BlogUpdateWithoutCommentsDataInput {
  title: String
  article: String
  likes: Int
  postedBy: UserUpdateOneRequiredWithoutBlogsInput
}

input BlogUpdateWithoutPostedByDataInput {
  title: String
  article: String
  likes: Int
  comments: CommentUpdateManyWithoutForBlogInput
}

input BlogUpdateWithWhereUniqueWithoutPostedByInput {
  where: BlogWhereUniqueInput!
  data: BlogUpdateWithoutPostedByDataInput!
}

input BlogUpsertWithoutCommentsInput {
  update: BlogUpdateWithoutCommentsDataInput!
  create: BlogCreateWithoutCommentsInput!
}

input BlogUpsertWithWhereUniqueWithoutPostedByInput {
  where: BlogWhereUniqueInput!
  update: BlogUpdateWithoutPostedByDataInput!
  create: BlogCreateWithoutPostedByInput!
}

input BlogWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  article: String
  article_not: String
  article_in: [String!]
  article_not_in: [String!]
  article_lt: String
  article_lte: String
  article_gt: String
  article_gte: String
  article_contains: String
  article_not_contains: String
  article_starts_with: String
  article_not_starts_with: String
  article_ends_with: String
  article_not_ends_with: String
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  postedBy: UserWhereInput
  comments_some: CommentWhereInput
  AND: [BlogWhereInput!]
}

input BlogWhereUniqueInput {
  id: ID
  title: String
}

type Comment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  likes: Int!
  postedBy: User!
  forBlog: Blog!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  content: String!
  likes: Int
  postedBy: UserCreateOneWithoutCommentsInput!
  forBlog: BlogCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutForBlogInput {
  create: [CommentCreateWithoutForBlogInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostedByInput {
  create: [CommentCreateWithoutPostedByInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutForBlogInput {
  id: ID
  content: String!
  likes: Int
  postedBy: UserCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostedByInput {
  id: ID
  content: String!
  likes: Int
  forBlog: BlogCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
  likes_ASC
  likes_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  likes: Int!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  content: String
  likes: Int
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
  forBlog: BlogUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  content: String
  likes: Int
}

input CommentUpdateManyMutationInput {
  content: String
  likes: Int
}

input CommentUpdateManyWithoutForBlogInput {
  create: [CommentCreateWithoutForBlogInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutForBlogInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutForBlogInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutPostedByInput {
  create: [CommentCreateWithoutPostedByInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutForBlogDataInput {
  content: String
  likes: Int
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostedByDataInput {
  content: String
  likes: Int
  forBlog: BlogUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutForBlogInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutForBlogDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostedByDataInput!
}

input CommentUpsertWithWhereUniqueWithoutForBlogInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutForBlogDataInput!
  create: CommentCreateWithoutForBlogInput!
}

input CommentUpsertWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostedByDataInput!
  create: CommentCreateWithoutPostedByInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  postedBy: UserWhereInput
  forBlog: BlogWhereInput
  AND: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBlog(data: BlogCreateInput!): Blog!
  updateBlog(data: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog
  updateManyBlogs(data: BlogUpdateManyMutationInput!, where: BlogWhereInput): BatchPayload!
  upsertBlog(where: BlogWhereUniqueInput!, create: BlogCreateInput!, update: BlogUpdateInput!): Blog!
  deleteBlog(where: BlogWhereUniqueInput!): Blog
  deleteManyBlogs(where: BlogWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  blog(where: BlogWhereUniqueInput!): Blog
  blogs(where: BlogWhereInput, orderBy: BlogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Blog]!
  blogsConnection(where: BlogWhereInput, orderBy: BlogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlogConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  blog(where: BlogSubscriptionWhereInput): BlogSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  name: String!
  password: String!
  email: String!
  phone: String
  address: String
  interest: String
  blogs(where: BlogWhereInput, orderBy: BlogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Blog!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  password: String!
  email: String!
  phone: String
  address: String
  interest: String
  blogs: BlogCreateManyWithoutPostedByInput
  comments: CommentCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutBlogsInput {
  create: UserCreateWithoutBlogsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBlogsInput {
  id: ID
  name: String!
  password: String!
  email: String!
  phone: String
  address: String
  interest: String
  comments: CommentCreateManyWithoutPostedByInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  password: String!
  email: String!
  phone: String
  address: String
  interest: String
  blogs: BlogCreateManyWithoutPostedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  interest_ASC
  interest_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  password: String!
  email: String!
  phone: String
  address: String
  interest: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  password: String
  email: String
  phone: String
  address: String
  interest: String
  blogs: BlogUpdateManyWithoutPostedByInput
  comments: CommentUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  name: String
  password: String
  email: String
  phone: String
  address: String
  interest: String
}

input UserUpdateOneRequiredWithoutBlogsInput {
  create: UserCreateWithoutBlogsInput
  update: UserUpdateWithoutBlogsDataInput
  upsert: UserUpsertWithoutBlogsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBlogsDataInput {
  name: String
  password: String
  email: String
  phone: String
  address: String
  interest: String
  comments: CommentUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  password: String
  email: String
  phone: String
  address: String
  interest: String
  blogs: BlogUpdateManyWithoutPostedByInput
}

input UserUpsertWithoutBlogsInput {
  update: UserUpdateWithoutBlogsDataInput!
  create: UserCreateWithoutBlogsInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  interest: String
  interest_not: String
  interest_in: [String!]
  interest_not_in: [String!]
  interest_lt: String
  interest_lte: String
  interest_gt: String
  interest_gte: String
  interest_contains: String
  interest_not_contains: String
  interest_starts_with: String
  interest_not_starts_with: String
  interest_ends_with: String
  interest_not_ends_with: String
  blogs_some: BlogWhereInput
  comments_some: CommentWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    