scalar DateTime

type Query {
  me: User
  getUser(id: ID, email: String): User
  allUsers: [User!]!
  getBlog(id: ID, title: String): Blog
  allBlogs: [Blog!]!
  filterBlogsByString(searchString: String): [Blog!]!
  filterBlogsByLikes(minLikes: Int): [Blog!]!
  getComment(id: ID!): Comment
  allComments: [Comment!]!
  filterCommentsByString(searchString: String): [Comment!]!
  filterCommentsByLikes(minLikes: Int): [Comment!]!
}

type Mutation {
  signup(name: String!, password: String!, email: String!): AuthPayload
  login(password: String!, email: String!): AuthPayload
  postBlog(title: String!, article: String!): Blog!
  postComment(content: String!, blogId: ID!): Comment!
  updateUser(id: ID, email: String, name: String, password: String, newEmail: String, phone: String, address: String, interest: String): User
  updateBlog(id: ID!, title: String, article: String, likes: Int): Blog
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  createdAt: DateTime!
  name: String!
  password: String!
  email: String!
  phone: String
  address: String
  interest: String
  blogs: [Blog!]!
  comments: [Comment!]!
}

type Blog {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String! 
  article: String!
  likes: Int
  postedBy: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  likes: Int
  postedBy: User!
  forBlog: Blog!
}